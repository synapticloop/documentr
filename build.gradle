/**
 * 
 * Thoughtfully generated by synapticloop gradle-project-init with the templar
 * templating language.
 *
 */

buildscript {
	repositories {
		mavenLocal()
		maven {
			url "https://plugins.gradle.org/"
		}
	}

	dependencies {
		classpath 'synapticloop:documentr:3.0.0'
	}
}

// list all of the plugins for this project
plugins {
	id 'java'
	id 'eclipse'
	id 'maven'
	id 'maven-publish'

	id 'com.gradle.plugin-publish' version '0.10.1'
	id 'co.riiid.gradle' version '0.4.2'
	id 'com.jfrog.bintray' version '1.8.4'

	id 'synapticloop.copyrightr' version '1.2.1'

	id 'com.github.ben-manes.versions' version '0.21.0'
}

apply plugin: 'synapticloop.documentr'

// the following is un-commented for faster builds as the JavaDoc process can 
// take quite a bit of time

tasks.withType(Javadoc).all { enabled = false }

// textual information for this project
group = 'synapticloop'
archivesBaseName = 'documentr'
description = """documentation (README) generator for projects in both markdown and asciidoc - this utilises the templar templating language - including generation of table of contents"""

version = '3.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8


// all of the repositories that this project will use
repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
}
configurations {
	minimal
}

// now for all of the dependencies
dependencies {
	compileOnly gradleApi()

	implementation 'commons-cli:commons-cli:1.4'
	implementation 'commons-io:commons-io:2.6'

	implementation 'nl.jworks.markdown_to_asciidoc:markdown_to_asciidoc:1.1'

	implementation 'org.json:json:20160810'
	implementation 'org.jsoup:jsoup:1.12.1'
	implementation 'org.pegdown:pegdown:1.6.0'

	implementation 'synapticloop:simpleusage:1.1.2'
	implementation 'synapticloop:simplelogger:2.0.0'
	implementation 'synapticloop:templar:1.4.4'
}

// we always want to fail on version conflict
configurations.all {
	resolutionStrategy {
		failOnVersionConflict()
		force 'org.pegdown:pegdown:1.6.0',
					'org.json:json:20160810',
					'org.jsoup:jsoup:1.12.1'
	}
}

copyrightr {
	dryRun = false

	copyrightHolder = "Synapticloop"

	includes = [ 
		"src/main/**/*.java",
		"LICENSE.txt"
	]

	onlyReplaceFirst = true

	yearSeparator = " - "
}

documentr {
	directory = '.'
	verbose = 'true'
	extension = 'md' // this is the default
	extension = 'adoc' // perhaps you want asciidoc?
}

def locateJar(lib) {
	configurations.runtime.findAll {it.getName().contains(lib)}.collect { it.isDirectory() ? it : zipTree(it) }
}

task fatJar(type: Jar) {
	classifier = 'all'

	manifest {
		attributes("Main-Class": "synapticloop.documentr.Main")
	}

	from { locateJar('simpleusage') } { include "**" }
	from { locateJar('simplelogger') } { include "**" }
	from { locateJar('commons-io') } { include "**" }
	from { locateJar('commons-cli') } { include "**" }
	from { locateJar('json') } { include "**" }
	from { locateJar('templar') } { include "**" }
	from { locateJar('markdown_to_asciidoc') } { include "**" }

	from(sourceSets.main.output) { include "**" }
}

build.finalizedBy(project.tasks.fatJar)
publishPlugins.finalizedBy(project.tasks.fatJar)

github {
	owner = group
	repo = archivesBaseName
	if(System.getenv('GITHUB_TOKEN')) {
		token = System.getenv('GITHUB_TOKEN')
	}
	tagName = version
	name = version
	assets = [
		'build/libs/' + archivesBaseName + '-' + version + '-all.jar',
		'build/libs/' + archivesBaseName + '-' + version + '.jar'
	]
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

publishing {
	publications {
		Synapticloop(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar

			groupId group
			artifactId archivesBaseName

			pom.withXml {
				configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
					asNode().dependencies[0].dependency.find {
						it.artifactId[0].text() == dep.moduleName &&
								it.groupId[0].text() == dep.moduleGroup
					}.scope[0].value = 'compile'
				}
			}
		}
	}
}

bintray {
	user = System.getenv('BINTRAY_USER')
	key = System.getenv('BINTRAY_PASSWORD')

	publications = [ 'Synapticloop' ]

	publish = true

	pkg {
		repo = 'maven'
		name = archivesBaseName
	}
}

pluginBundle {
	website = 'https://github.com/synapticloop/documentr'
	vcsUrl = 'https://github.com/synapticloop/documentr'
	description = 'documentation (README) generator for projects in both markdown and asciidoc - this utilises the templar templating language'
	tags = [ 'README', 'documentation', 'generator' ]

	plugins {
		documentrPlugin {
			id = 'synapticloop.documentr'
			displayName = 'Synapticloop Gradle documentr plugin'
		}
	}
}

